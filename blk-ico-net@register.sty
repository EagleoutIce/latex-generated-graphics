%% block icon network generator package
%% Florian Sihler, 2021-03-14
\ProvidesPackage{blk-ico-net@register}[2021/03/14 v1.0 blk icon network generator package]
\ifbinet@setup@cpalette@
    \ifbinet@setup@gradient@
        \def\binet@gradient@min{30}%
        \def\binet@gradient@max{85}%
        \def\binet@gradient@step{22}%
        \edef\binet@gradient@cur{\the\numexpr\binet@gradient@max+\binet@gradient@step\relax}%
        \def\binet@loadBlockColor{\pgfmathsetmacro\binet@gradient@cur{int(\binet@gradient@cur-\binet@gradient@step)}\ifnum\binet@gradient@cur<\binet@gradient@min\edef\binet@gradient@cur{\the\numexpr\binet@gradient@max+\binet@gradient@step\relax}\fi\edef\binet@blockcolor{paletteA!\binet@gradient@cur!white}}
    \else
    \pgfmathdeclarerandomlist{binet@colorlist}{{paletteA}{paletteB}{paletteC}{paletteD}}
    \def\binet@loadBlockColor{\pgfmathrandomitem{\binet@blockcolor}{binet@colorlist}}
    \fi
\else
    \colorlet{binet@block}{purple}
    \ifbinet@setup@gradient@
    \def\binet@gradient@min{30}%
    \def\binet@gradient@max{85}%
    \def\binet@gradient@step{22}%
    \edef\binet@gradient@cur{\the\numexpr\binet@gradient@max+\binet@gradient@step\relax}%
    \def\binet@loadBlockColor{\pgfmathsetmacro\binet@gradient@cur{int(\binet@gradient@cur-\binet@gradient@step)}\ifnum\binet@gradient@cur<\binet@gradient@min\edef\binet@gradient@cur{\the\numexpr\binet@gradient@max+\binet@gradient@step\relax}\fi\edef\binet@blockcolor{binet@block!\binet@gradient@cur!white}}
    \else
        \def\binet@loadBlockColor{\edef\binet@blockcolor{binet@block}}
    \fi
\fi
% TODO: extend with kprim selection etc
\newcounter{binet@block@count}
\newcounter{binet@x}\newcounter{binet@y}
\newcounter{binet@a}\newcounter{binet@b}\newcounter{binet@c}
\newcounter{binet@block@a}
\newdimen\binet@start@x \newdimen\binet@end@x
\newdimen\binet@start@y \newdimen\binet@end@y

% The goal is to create small icons of given sizes
% which all present a random but simple blk icon
% pt will serve as the basic unit
\def\binet@newlength#1=#2;{% legacy :C
\expandafter\newlength\csname binet@#1\endcsname
\expandafter\newlength\csname binet@default@#1\endcsname
\expandafter\csname binet@default@#1\endcsname=#2}
\def\binet@newreg#1=#2;{\expandafter\def\csname binet@default@#1\endcsname{#2}}
\binet@newreg padding@x=2;
\binet@newreg padding@y=2;
\binet@newreg scale=1;

% TODO: i use inset as buffer for not working checks
\binet@newreg inset@x=2;
\binet@newreg inset@y=2;
\binet@newreg jitter@x=0;
\binet@newreg jitter@y=0;
\binet@newreg jitter@steps=3;
\binet@newreg width=25;
\binet@newreg height=25;
\binet@newreg block@min@width=8;
\binet@newreg block@max@width=13;
\binet@newreg block@min@height=6;
\binet@newreg block@max@height=8;
\binet@newreg block@min@count=3;
\binet@newreg block@max@count=15;
\binet@newreg block@deadcycles@count=60;
\binet@newreg lines@max@count=12;
\binet@newreg lines@min@count=3;% maybe try?

\newif\if@binet@flag@a@
\newif\if@binet@flag@typeset@block@
\newif\if@binet@drawframe
\newif\if@binet@drawgrid
\colorlet{binet@framegray}{gray!60!lightgray}
\colorlet{binet@gridgray}{lightgray}
\tikzset{%
    binet@outer@roundings/.style={rounded corners=.75pt*\binet@scale},
    binet@frame/.style={draw,line width=.25pt,binet@framegray,binet@outer@roundings},
    binet@grid/.style={binet@gridgray,line width=.05pt,step=\binet@grid@step},
    binet@block/.style={fill=#1,draw=#1,rounded corners=.25pt*\binet@scale},%
    binet@line/.style={line width=.8pt*\binet@scale,draw,rounded corners=.125pt*\binet@scale,#1},%
    binet@@pathfade/.style n args={3}{
        postaction={decorate,decoration={markings,
        mark=between positions 0 and \pgfdecoratedpathlength step #1/3.75*\binet@scale with {
        \pgfmathsetmacro\binet@gradient{multiply(divide(\pgfkeysvalueof{/pgf/decoration/mark info/distance from start}, \pgfdecoratedpathlength),100)};
        \pgfsetfillcolor{#3!\binet@gradient!#2};
        \pgfpathcircle{\pgfpointorigin}{#1*\binet@scale};
        \pgfusepath{fill};}}},
    },
    binet@pathfade/.style 2 args={binet@@pathfade={.45pt}{#1}{#2}},
}

\ifbinet@setup@frameblock@
\tikzset{binet@node@block/.style={draw,thin,#1!80!black}}
\else\tikzset{binet@node@block/.style={}}\fi

\pgfkeys{%
/binet@keys/.is family, /binet@keys,
square/.code={\edef\binet@width{#1}\def\binet@height{#1}},
width/.store in=\binet@width, height/.store in=\binet@height,
padding/.code={\def\binet@padding@x{#1}\def\binet@padding@y{#1}},
padding x/.store in=\binet@padding@x,
padding y/.store in=\binet@padding@y,
inset/.code={\def\binet@inset@x{#1}\def\binet@inset@y{#1}},
inset x/.store in=\binet@inset@x,
inset y/.store in=\binet@inset@y,
jitter/.code={\def\binet@jitter@x{#1}\def\binet@jitter@y{#1}},
jitter x/.store in=\binet@jitter@x,
jitter y/.store in=\binet@jitter@y,
jitter steps/.store in=\binet@jitter@steps,
min block width/.store in=\binet@block@min@width,
max block width/.store in=\binet@block@max@width,
min block height/.store in=\binet@block@min@height,
max block height/.store in=\binet@block@max@height,
min block count/.store in=\binet@block@min@count,
deadcycles block count/.store in=\binet@block@deadcycles@count,
max block count/.store in=\binet@block@max@count,
max line count/.store in=\binet@lines@max@count,
min line count/.store in=\binet@lines@min@count,
frame/.is if=@binet@drawframe,
grid/.is if=@binet@drawgrid,
grid step/.store in=\binet@grid@step,
scale/.store in=\binet@scale,
defaults/.style={%
    width=\binet@default@width, height=\binet@default@height,
    padding x=\binet@default@padding@x, padding y=\binet@default@padding@y,
    inset x=\binet@default@inset@x, inset y=\binet@default@inset@y,
    jitter x=\binet@default@jitter@x, jitter y=\binet@default@jitter@y,
    jitter steps=\binet@default@jitter@steps,
    min block width=\binet@default@block@min@width,
    max block width=\binet@default@block@max@width,
    min block height=\binet@default@block@min@height,
    max block height=\binet@default@block@max@height,
    max block count=\binet@default@block@max@count,
    min block count=\binet@default@block@min@count,
    deadcycles block count=\binet@default@block@deadcycles@count,
    max line count=\binet@default@lines@max@count,%
    min line count=\binet@default@lines@min@count,%
    grid step=1pt, scale=\binet@default@scale
}}
\endinput