%% block icon network generator package
%% Florian Sihler, 2021-03-14
\ProvidesPackage{blk-ico-net@register}[2021/03/14 v1.0 blk icon network generator package]
\ifiinet@setup@cpalette@
    \ifiinet@setup@gradient@
        \def\iinet@gradient@min{30}%
        \def\iinet@gradient@max{85}%
        \def\iinet@gradient@step{22}%
        \edef\iinet@gradient@cur{\the\numexpr\iinet@gradient@max+\iinet@gradient@step\relax}%
        \def\iinet@loadBlockColor{\pgfmathsetmacro\iinet@gradient@cur{int(\iinet@gradient@cur-\iinet@gradient@step)}\ifnum\iinet@gradient@cur<\iinet@gradient@min\edef\iinet@gradient@cur{\the\numexpr\iinet@gradient@max+\iinet@gradient@step\relax}\fi\edef\iinet@blockcolor{paletteA!\iinet@gradient@cur!white}}
    \else
    \pgfmathdeclarerandomlist{iinet@colorlist}{{paletteA}{paletteB}{paletteC}{paletteD}}
    \def\iinet@loadBlockColor{\pgfmathrandomitem{\iinet@blockcolor}{iinet@colorlist}}
    \fi
\else
    \colorlet{iinet@block}{purple}
    \ifiinet@setup@gradient@
    \def\iinet@gradient@min{30}%
    \def\iinet@gradient@max{85}%
    \def\iinet@gradient@step{22}%
    \edef\iinet@gradient@cur{\the\numexpr\iinet@gradient@max+\iinet@gradient@step\relax}%
    \def\iinet@loadBlockColor{\pgfmathsetmacro\iinet@gradient@cur{int(\iinet@gradient@cur-\iinet@gradient@step)}\ifnum\iinet@gradient@cur<\iinet@gradient@min\edef\iinet@gradient@cur{\the\numexpr\iinet@gradient@max+\iinet@gradient@step\relax}\fi\edef\iinet@blockcolor{iinet@block!\iinet@gradient@cur!white}}
    \else
        \def\iinet@loadBlockColor{\edef\iinet@blockcolor{iinet@block}}
    \fi
\fi
% TODO: extend with kprim selection etc
\newcounter{iinet@block@count}
\newcounter{iinet@x}\newcounter{iinet@y}
\newcounter{iinet@a}\newcounter{iinet@b}\newcounter{iinet@c}
\newcounter{iinet@block@a}
\newdimen\iinet@start@x \newdimen\iinet@end@x
\newdimen\iinet@start@y \newdimen\iinet@end@y

% The goal is to create small icons of given sizes
% which all present a random but simple blk icon
% pt will serve as the basic unit
\def\iinet@newlength#1=#2;{% legacy :C
\expandafter\newlength\csname iinet@#1\endcsname
\expandafter\newlength\csname iinet@default@#1\endcsname
\expandafter\csname iinet@default@#1\endcsname=#2}
\def\iinet@newreg#1=#2;{\expandafter\def\csname iinet@default@#1\endcsname{#2}}
\iinet@newreg padding@x=2;
\iinet@newreg padding@y=2;
\iinet@newreg scale=1;

% TODO: i use inset as buffer for not working checks
\iinet@newreg inset@x=2;
\iinet@newreg inset@y=2;
\iinet@newreg jitter@x=0;
\iinet@newreg jitter@y=0;
\iinet@newreg jitter@steps=3;
\iinet@newreg width=25;
\iinet@newreg height=25;
\iinet@newreg block@min@width=8;
\iinet@newreg block@max@width=13;
\iinet@newreg block@min@height=6;
\iinet@newreg block@max@height=8;
\iinet@newreg block@min@count=3;
\iinet@newreg block@max@count=15;
\iinet@newreg block@deadcycles@count=60;
\iinet@newreg lines@max@count=12;
\iinet@newreg lines@min@count=3;% maybe try?

\newif\if@iinet@flag@a@
\newif\if@iinet@flag@typeset@block@
\newif\if@iinet@drawframe
\newif\if@iinet@drawgrid
\colorlet{iinet@framegray}{gray!60!lightgray}
\colorlet{iinet@gridgray}{lightgray}
\tikzset{%
    iinet@outer@roundings/.style={rounded corners=.75pt*\iinet@scale},
    iinet@frame/.style={draw,line width=.25pt,iinet@framegray,iinet@outer@roundings},
    iinet@grid/.style={iinet@gridgray,line width=.05pt,step=\iinet@grid@step},
    iinet@block/.style={fill=#1,draw=#1,rounded corners=.25pt*\iinet@scale},%
    iinet@line/.style={line width=.8pt*\iinet@scale,draw,rounded corners=.125pt*\iinet@scale,#1},%
    iinet@@pathfade/.style n args={3}{
        postaction={decorate,decoration={markings,
        mark=between positions 0 and \pgfdecoratedpathlength step #1/3.75*\iinet@scale with {
        \pgfmathsetmacro\iinet@gradient{multiply(divide(\pgfkeysvalueof{/pgf/decoration/mark info/distance from start}, \pgfdecoratedpathlength),100)};
        \pgfsetfillcolor{#3!\iinet@gradient!#2};
        \pgfpathcircle{\pgfpointorigin}{#1*\iinet@scale};
        \pgfusepath{fill};}}},
    },
    iinet@pathfade/.style 2 args={iinet@@pathfade={.45pt}{#1}{#2}},
}

\ifiinet@setup@frameblock@
\tikzset{iinet@node@block/.style={draw,thin,#1!80!black}}
\else\tikzset{iinet@node@block/.style={}}\fi

\pgfkeys{%
/iinet@keys/.is family, /iinet@keys,
square/.code={\edef\iinet@width{#1}\def\iinet@height{#1}},
width/.store in=\iinet@width, height/.store in=\iinet@height,
padding/.code={\def\iinet@padding@x{#1}\def\iinet@padding@y{#1}},
padding x/.store in=\iinet@padding@x,
padding y/.store in=\iinet@padding@y,
inset/.code={\def\iinet@inset@x{#1}\def\iinet@inset@y{#1}},
inset x/.store in=\iinet@inset@x,
inset y/.store in=\iinet@inset@y,
jitter/.code={\def\iinet@jitter@x{#1}\def\iinet@jitter@y{#1}},
jitter x/.store in=\iinet@jitter@x,
jitter y/.store in=\iinet@jitter@y,
jitter steps/.store in=\iinet@jitter@steps,
min block width/.store in=\iinet@block@min@width,
max block width/.store in=\iinet@block@max@width,
min block height/.store in=\iinet@block@min@height,
max block height/.store in=\iinet@block@max@height,
min block count/.store in=\iinet@block@min@count,
deadcycles block count/.store in=\iinet@block@deadcycles@count,
max block count/.store in=\iinet@block@max@count,
max line count/.store in=\iinet@lines@max@count,
min line count/.store in=\iinet@lines@min@count,
frame/.is if=@iinet@drawframe,
grid/.is if=@iinet@drawgrid,
grid step/.store in=\iinet@grid@step,
scale/.store in=\iinet@scale,
defaults/.style={%
    width=\iinet@default@width, height=\iinet@default@height,
    padding x=\iinet@default@padding@x, padding y=\iinet@default@padding@y,
    inset x=\iinet@default@inset@x, inset y=\iinet@default@inset@y,
    jitter x=\iinet@default@jitter@x, jitter y=\iinet@default@jitter@y,
    jitter steps=\iinet@default@jitter@steps,
    min block width=\iinet@default@block@min@width,
    max block width=\iinet@default@block@max@width,
    min block height=\iinet@default@block@min@height,
    max block height=\iinet@default@block@max@height,
    max block count=\iinet@default@block@max@count,
    min block count=\iinet@default@block@min@count,
    deadcycles block count=\iinet@default@block@deadcycles@count,
    max line count=\iinet@default@lines@max@count,%
    min line count=\iinet@default@lines@min@count,%
    grid step=1pt, scale=\iinet@default@scale
}}
\endinput