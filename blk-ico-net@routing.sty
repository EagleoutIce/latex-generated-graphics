%% block icon network generator package
%% Florian Sihler, 2021-03-14
\ProvidesPackage{blk-ico-net@routing}[2021/03/14 v1.0 blk icon network generator package]
\RequirePackage{latex-bfs}

% TODO: Store on create to avoid consistent recalc
\def\binet@load@p@xy#1>#2,#3;{%
  \pgfextractx#2{\pgfpointanchor{#1}{center}}%
  \pgfextracty#3{\pgfpointanchor{#1}{center}}%
}

\ifbinet@setup@pathfade@
\newcommand*\binet@dl@root[1][]{\path[binet@pathfade={\binet@getblock@{\binet@lines@start}{c}}{\binet@getblock@{\binet@lines@end}{c}},#1]}%
\else
\newcommand*\binet@dl@root[1][]{\path[binet@line=\binet@getblock@{\binet@lines@start}{c},#1]}%
\fi

\def\binet@@dl@#1{\binet@dl@root (binet-block-\binet@lines@start) #1 (binet-block-\binet@lines@end);}

\def\binet@route@lines@pick@ab{%
% pick first block
\binet@math@getrand@int\binet@lines@start1\c@binet@block@count
% target: remove one and add mod total to avoid same
\pgfmathsetmacro\binet@lines@end{int(mod(\binet@lines@start+random(1,\c@binet@block@count-1),\c@binet@block@count))}%
\ifnum\binet@lines@end=0
    \ifnum\binet@lines@start=1 \def\binet@lines@end{2}\else
    \def\binet@lines@end{1}\fi
\fi
% do not draw same twice:
\ifcsname binet@line@\binet@lines@start @\binet@lines@end\endcsname\else
\ifcsname binet@line@\binet@lines@end @\binet@lines@start\endcsname\else
    \binet@debug{Line: '\binet@lines@start' -> '\binet@lines@end'}
    \@namedef{binet@line@\binet@lines@start @\binet@lines@end}{}
    % Draw the line:
    \binet@load@p@xy{binet-block-\binet@lines@start}>\binet@start@x,\binet@start@y;
    \binet@load@p@xy{binet-block-\binet@lines@end}>\binet@end@x,\binet@end@y;
    \binet@route@lines@bfs{\binet@lines@start}{\binet@lines@end}%
    \ifx\binet@bfs@routing@result\@empty
    %BFS CALL: \binet@route@lines@bfs{\binet@lines@start}{\binet@lines@end}
    \edef\@tmp{\the\numexpr\binet@end@x-\binet@start@x}
    \expandafter\pgfmathabs@\expandafter{\@tmp}\let\binet@delta@x\@tmp
    \edef\@tmp{\the\numexpr\binet@end@y-\binet@start@y}
    \expandafter\pgfmathabs@\expandafter{\@tmp}\let\binet@delta@y\@tmp
    \ifdim\binet@delta@x pt=\z@\relax \binet@@dl@{--}\else
        \ifdim\binet@delta@y pt=\z@\relax \binet@@dl@{--}\else
            \ifdim\binet@delta@y pt>\binet@delta@x pt\relax
                \binet@@dl@{|-}\else
                \binet@@dl@{-|}
            \fi
        \fi
    \fi
    \else
    \binet@@dl@{ foreach \x/\y in \binet@bfs@routing@result {--(\x, \y)}--}%
    \fi
\fi\fi}
\def\binet@route@lines{
    \binet@math@min@two\@tmp\binet@lines@max@count{\the\numexpr\c@binet@block@count*\tw@-\@ne}
    \binet@math@getrand@int\binet@lines@to@draw\binet@lines@min@count\@tmp
    \binet@debug{Got '\number\c@binet@block@count' blocks connect up to '\binet@lines@to@draw' lines}
    \begin{pgfonlayer}{background}
    \c@binet@c\z@
    \@whilenum\c@binet@c<\binet@lines@to@draw\do{
        \binet@route@lines@pick@ab
        \advance\c@binet@c\@ne
    }
    \end{pgfonlayer}
}


% run a breadth first search between #1 and #2 in the given matrix
% \binet@if@m@cfree(x,y){<free>}{<blocked>}
\CreateQueue{binet@bfs@routing@start}
\CreateQueue{binet@bfs@routing@end}
\CreateQueue{binet@bfs@routing@result}

\def\binet@CheckBlock(#1/#2)#3#4{\binet@if@m@free(\the\numexpr#1-\@ne,\the\numexpr#2-\@ne){#4}{#3}}
% queue :#2 => block #1
\def\binet@route@lines@setblock@center#1#2{% add one for int rounding error? TODO: .5
\c@pgfmath@counta\the\numexpr\binet@getblock@{#1}{w}+\@ne\relax
\divide\c@pgfmath@counta\tw@
\expandafter\edef\csname #2@x\endcsname{\the\numexpr\binet@getblock@{#1}{x}+\c@pgfmath@counta}%
\c@pgfmath@counta\the\numexpr\binet@getblock@{#1}{h}+\@ne\relax
\divide\c@pgfmath@counta\tw@
\expandafter\edef\csname #2@y\endcsname{\the\numexpr\binet@getblock@{#1}{y}+\c@pgfmath@counta}}

\def\binet@route@lines@bfs#1#2{%
\binet@route@lines@setblock@center{#1}{center@start}%
\binet@route@lines@setblock@center{#2}{center@end}%
% kill the selected blocks in the block mask
\binet@single@block@specialblock{#1}{unblock}%
\binet@single@block@specialblock{#2}{unblock}%
\binet@update@present@squares
% clear the result queue
\ResetQueue{binet@bfs@routing@result}%
% TODO: same for end block with endl
\edef\@tmp{(\center@start@x/\center@start@y)->(\center@end@x/\center@end@y)[\binet@width x\binet@height]}
\expandafter\GetShortestPath\@tmp{binet@CheckBlock}{binet@bfs@routing@result}
\binet@debug{Result: (\GetQueue{binet@bfs@routing@result})}
\edef\binet@bfs@routing@result{\GetQueue{binet@bfs@routing@result}}
% reinsert the selected blocks in the block mask
\binet@single@block@specialblock{#1}{block}%
\binet@single@block@specialblock{#2}{block}%
\binet@update@present@squares
}

\endinput