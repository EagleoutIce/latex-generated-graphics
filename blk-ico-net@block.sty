%% block icon network generator package
%% Florian Sihler, 2021-03-14
\ProvidesPackage{blk-ico-net@block}[2021/03/14 v1.0 blk icon network generator package]

%%% How (TODO: rasterize: TODO: maximum number? TODO: padding [save #pt bigger blocks?])
% NOTE: changed usage... not min; inefficient approach at first ^^
% 1) calculate differences between min and max for both dimens: block@dif@{x,y}
% 2) hold a list for all y with [height-block@min@height] elements:
%       list for all x with [width-block@min@width] elements
%    => Listname is 'matrix'
% 3) update present squares:
%   foreach y:
%     max@[y]@x = min(longest consecutive x in cur:y, block@dif@x)
%     if max@[y]@x<block@min@x: [[Throw; y]]
%   max@y = min(longest consecutive y, block@dif@y)
%   if max@y<block@min@y: [[ERROR]]
%
% update present squares()
%
% ------------------------ on block:
% 4) rand@h = rand(block@y@min, max@y)
% 5) pick random y in list.
%   if any in [y..y+rand@h] not in ylist: [[mod-cycle until it fits]] // has to for y
%   (side:) calculate max@x width possible in [y..y+rand@h] // has to for x
% 6) rand@w = rand(block@x@min, max@x)
% pick random x fitting that width
%
% place block (x, y, rand@w, rand@h)
% kill fields1

% location (lower-left) | color | width | height | special name
\def\iinet@draw@single@@block#1#2#3#4#5{% TODO: union node with current path
    \path[iinet@block=#2] (#1)++(\iinet@inset@x,\iinet@inset@y) rectangle ++(#3-\iinet@inset@x,#4-\iinet@inset@y) node[%
        midway,outer sep=\z@,inner sep=\z@,
        minimum width=#3-\iinet@inset@x pt,
        minimum height=#4-\iinet@inset@y pt,% TODO: change shading
        iinet@node@block=#2%
    ] (#5) {}  coordinate[midway,centered] (iinet-block-\arabic{iinet@block@count});
}

\def\iinet@fronte@draw@block{\@ifnextchar[{\iinet@@fronte@draw@block}{\iinet@loadBlockColor
\iinet@@fronte@draw@block[\iinet@blockcolor]}}
\def\iinet@@fronte@draw@block[#1](#2,#3,#4,#5){\@ifnextchar[{\iinet@@@fronte@draw@block[#1](#2,#3,#4,#5)}{\iinet@@@fronte@draw@block[#1](#2,#3,#4,#5)[]}}%
\def\iinet@@@fronte@draw@block[#1](#2,#3,#4,#5)[#6]{%
    % assure 1 counter
    \stepcounter{iinet@block@count}%
    % compensate inset!
    \iinet@draw@single@@block{{#2-\iinet@inset@x},{#3-\iinet@inset@y}}{#1}{#4+\iinet@inset@x}{#5+\iinet@inset@y}{#6}%
}

\def\iinet@getblock@#1#2{\csname iinet@block@#1@#2\endcsname}
\def\iinet@getblock#1{\csname iinet@block@\arabic{iinet@block@count}@#1\endcsname}

\def\iinet@setblock#1#2{%
\expandafter\edef\csname iinet@block@\arabic{iinet@block@count}@#1\endcsname{#2}%
}

\def\iinet@setblockrand#1#2#3{\pgfmathrandominteger{\@iinet@tmp}{#2}{#3}\setblock{#1}{\@iinet@tmp}}
\def\iinet@m@max@of@y#1{\ifcsname iinet@max@#1@x\endcsname\@nameuse{iinet@max@#1@x}\else-1\fi}
\def\iinet@get@consecutive@x@{\ifnum\value{iinet@a}>\@iinet@con@x\relax\edef\@iinet@con@x{\arabic{iinet@a}}\fi\setcounter{iinet@a}{0}}

\def\iinet@get@consecutive@x#1{%
% do not run if already known 0
\ifnum\iinet@m@max@of@y{\arabic{iinet@y}}=0\relax\else
\setcounter{iinet@a}{0}% current
\def\@iinet@con@x{0}% maximum
\setcounter{iinet@x}{#1}% start x
\iinet@m@for@x{%
    \iinet@if@m@cfree(iinet@x,iinet@y)%
        {\stepcounter{iinet@a}}% free
        {\iinet@get@consecutive@x@}%
}\iinet@get@consecutive@x@\fi
}

\def\iinet@get@consecutive@y@{\ifnum\value{iinet@a}>\@iinet@con@y\relax\edef\@iinet@con@y{\arabic{iinet@a}}\fi\setcounter{iinet@a}{0}}
\def\iinet@get@consecutive@y{%
\setcounter{iinet@a}{0}% current
\setcounter{iinet@b}{0}% total added
\def\@iinet@con@y{0}% maximum
\def\iinet@m@ylist{}%
\iinet@m@for@y{%
    \ifnum\iinet@m@max@of@y{\arabic{iinet@y}}=0\relax
        \iinet@get@consecutive@y@
    \else
        \stepcounter{iinet@a}\stepcounter{iinet@b}%
        \listeadd\iinet@m@ylist{\arabic{iinet@y}}%
    \fi
}\iinet@get@consecutive@y@
}

\def\iinet@update@present@squares{%
    % TODO: set error flag (if?) in case of insufficient dimensions
    \iinet@m@for@y{%
        \iinet@get@consecutive@x{0}
        \expandafter\edef\csname iinet@max@\arabic{iinet@y}@x\endcsname{\@iinet@con@x}%
    }
    \iinet@get@consecutive@y
    \expandafter\edef\csname iinet@max@y\endcsname{\@iinet@con@y}%
    \edef\iinet@m@ylist@total{\arabic{iinet@b}}%
}

\def\iinet@block@randxy@picky@first{%
    \pgfmathrandominteger{\iinet@rand@y}{0}{\iinet@m@ylist@total-\get{h}-1}
    \setcounter{iinet@a}{0}% current
    \def\iinet@selected@y{-1}%
    \def\do##1{%
        \ifnum\value{iinet@a}=\iinet@rand@y\relax
            \edef\iinet@selected@y{##1}%
        \fi
        \stepcounter{iinet@a}%
    }
    \dolistloop{\iinet@m@ylist}%
}

% start | height
\def\iinet@block@randxy@picky@testfit#1#2{%
    % \iinet@m@max@of@y
    \setcounter{iinet@y}{#1}%
    \@iinet@flag@a@true
    \edef\@iinet@y{\the\numexpr#1+#2+1\relax}% +1 as y not <=
    \@whilenum\value{iinet@y}<\@iinet@y\do{%
        \edef\@iinet@tmp{\iinet@m@max@of@y{\arabic{iinet@y}}}%
        \ifnum\@iinet@tmp<1\relax % 0 or invalid
            \@iinet@flag@a@false
        \fi
        \stepcounter{iinet@y}
    }
}

\def\iinet@block@randxy@picky{%
% ylist: \iinet@m@ylist (\iinet@m@ylist@total)
% cycle up to: as the list is sorted ascending,
% there have to be at least 'h' remaining
\iinet@block@randxy@picky@first
\setcounter{iinet@a}{\iinet@selected@y}%
\ifnum\iinet@selected@y<0\relax
    \PackageWarning{blk-ico-net}{first y pick selected '\iinet@selected@y' which is registered as a warning. Block will be omitted}
    \@iinet@flag@typeset@block@false
\fi
\iinet@block@randxy@picky@testfit{\arabic{iinet@a}}{\get{h}}
\if@iinet@flag@a@\else
    % if this is set iinet@a does not suffice
    % so we cycle until it fits or iinet@a=\iinet@selected@y
    \iinet@debug{Original y-selection (\iinet@selected@y) failed, reshift}
    \setcounter{iinet@b}{0}
    \@whilenum\value{iinet@b}<\iinet@m@ylist@total\do{%
        \pgfmathparse{int(mod(\arabic{iinet@a}+1,\iinet@m@ylist@total))}% mod shift 1
        \setcounter{iinet@a}{\pgfmathresult}
        \iinet@block@randxy@picky@testfit{\arabic{iinet@a}}{\get{h}}% free
        \if@iinet@flag@a@ % can be placed on this height
            \setcounter{iinet@b}{\iinet@m@ylist@total}% 'break'
        \fi
        \stepcounter{iinet@b}%
    }
\fi
\setblock{y}{\arabic{iinet@a}}%
}

\def\iinet@get@topline@x@{%
    \ifnum\value{iinet@a}<\value{iinet@b}\else
        \listeadd\@iinet@topline@x{\@iinet@curx:\arabic{iinet@a}}%
        \stepcounter{iinet@c}%
        \edef\@iinet@curx{\arabic{iinet@x}}
    \fi
    \setcounter{iinet@a}{0}%#
}

\def\iinet@split@listelem#1:#2;{\edef\iinet@cur@xidx{#1}\edef\iinet@cur@xlen{#2}}

\def\iinet@block@randxy@pickxw@topline{%
    \def\@iinet@topline@x{}
    \ifnum\iinet@m@max@of@y{\arabic{iinet@y}}=0\else
    \setcounter{iinet@a}{0}% current
    \setcounter{iinet@x}{0}%
    \setcounter{iinet@c}{0}% total
    \def\@iinet@curx{0}
    \iinet@m@for@x{%
        \iinet@if@m@cfree(iinet@x,iinet@y)%
            {\stepcounter{iinet@a}}% free
            {\iinet@get@topline@x@}%
    }\iinet@get@topline@x@\fi
    % select random element and split '@'
    \setcounter{iinet@a}{0}% current
    \def\iinet@selected@x{}%
    \pgfmathrandominteger{\iinet@desired@idx}{0}{\value{iinet@c}-1}
    \def\do##1{%
        \ifnum\value{iinet@a}=\iinet@desired@idx\relax
            \edef\iinet@selected@x{##1}%
        \fi
        \stepcounter{iinet@a}%
    }
    \dolistloop{\@iinet@topline@x}%
    \ifx\iinet@selected@x\@empty % if does not catch => save
        \@iinet@flag@typeset@block@false
    \else
        \expandafter\iinet@split@listelem\iinet@selected@x;
    \fi
}

\def\iinet@get@xrange@x@{%
    \ifnum\value{iinet@a}>\@iinet@sub@xlen\relax
        \edef\@iinet@sub@xlen{\arabic{iinet@a}}%
        \edef\@iinet@sub@xidx{\@iinet@sub@lastidx}%
    \fi
    \setcounter{iinet@a}{0}%
    \edef\@iinet@sub@lastidx{\arabic{iinet@x}}%
}


\def\iinet@block@randxy@pickxw@xrange{%
    \setcounter{iinet@x}{\iinet@cur@xidx}% current
    \setcounter{iinet@a}{0}%
    \def\@iinet@sub@lastidx{0}%
    \def\@iinet@sub@xidx{0}%
    \def\@iinet@sub@xlen{-1}%
    \@whilenum\value{iinet@x}<\numexpr\iinet@cur@xidx+\iinet@cur@xlen+1\relax\do{%
        \iinet@if@m@cfree(iinet@x,iinet@y)%
            {\stepcounter{iinet@a}}% free
            {\iinet@get@xrange@x@}%
        \stepcounter{iinet@x}%
    }\iinet@get@xrange@x@
    % intersect [sub:xidx..xidx+xlen] and [cur:xidx..xidx+xlen]
    \edef\iinet@cur@xidx@old{\iinet@cur@xidx}%
    \ifnum\@iinet@sub@xidx>\iinet@cur@xidx\relax% low
        \edef\iinet@cur@xidx{\@iinet@sub@xidx}%
    \fi
    \ifnum\numexpr\@iinet@sub@xidx+\@iinet@sub@xlen\relax<\numexpr\iinet@cur@xidx+\iinet@cur@xlen\relax% len
        \pgfmathsetmacro\iinet@cur@xlen{int(\@iinet@sub@xidx+\@iinet@sub@xlen-\iinet@cur@xidx)}%
    \fi
}


\def\iinet@block@randxy@pickxw{%
% find largest rectangle on y
% trying from block@min@width up to max@[y]@x
\setblockrand{w}{\iinet@block@min@width}{min(\iinet@block@max@width,\iinet@m@max@of@y{\get{y}})}%
\setcounter{iinet@b}{\iinet@block@min@width}%
\def\iinet@effective@w{0}%
\def\iinet@effective@x{0}%
\@whilenum\value{iinet@b}<\numexpr\get{w}+1\relax\do{%
    \setcounter{iinet@y}{\get{y}}%
    % find start in topline => \iinet@cur@xidx & \iinet@cur@xlen
    \iinet@block@randxy@pickxw@topline
    \stepcounter{iinet@y}%
    \if@iinet@flag@typeset@block@
    \@whilenum\value{iinet@y}<\numexpr\get{y}+\get{h}\relax\do{% TODO: maybe +1?
        % search for the largest x-slot in 'xidx..xidx+xlen'
        % if found, it will narrow it down
        \iinet@block@randxy@pickxw@xrange
        \stepcounter{iinet@y}%
    }%
    \iinet@debug{In run for \arabic{iinet@b}: [\iinet@cur@xidx..+\iinet@cur@xlen]}%
    \ifnum\iinet@cur@xlen<\iinet@effective@w\else
        \ifnum\arabic{iinet@b}<\iinet@cur@xlen
        \ifnum\iinet@cur@xidx<0\else
        \edef\iinet@effective@w{\iinet@cur@xlen}%
        \edef\iinet@effective@x{\iinet@cur@xidx}%
        \edef\iinet@effective@b{\arabic{iinet@b}}%
        \iinet@debug{  Updated: [\iinet@effective@x..+\iinet@effective@w]}%
    \fi\fi\fi
    \fi
    \stepcounter{iinet@b}%
}%
\if@iinet@flag@typeset@block@
    \ifnum\iinet@effective@w<\iinet@block@min@width\relax
        \@iinet@flag@typeset@block@false
    \else
        \pgfmathparse{int(min(\iinet@effective@w,\get{w},\iinet@effective@b))}%
        \setblock{w}{\pgfmathresult}%
        \setblockrand{x}{\iinet@effective@x}{\iinet@effective@x+\iinet@effective@w-\get{w}}%
    \fi
\fi
}

% TODO: if fails for current h, try with one h less
\def\iinet@block@randxy{
    \setblockrand{h}{\iinet@block@min@height}{min(\iinet@block@max@height,\iinet@max@y)}% 4)
    \iinet@block@randxy@picky% 5)
    \iinet@block@randxy@pickxw% 6)
}


\def\iinet@single@block@specialblock#1#2{
  % block y
  \setcounter{iinet@y}{0}
  \@whilenum\value{iinet@y}<\iinet@getblock@{#1}{h}\do{%
    \setcounter{iinet@x}{0}%
    \@whilenum\value{iinet@x}<\iinet@getblock@{#1}{w}\do{%
        \csname iinet@m@#2\endcsname(%
            \the\numexpr\arabic{iinet@x}+\iinet@getblock@{#1}{x}\relax,%
            \the\numexpr\arabic{iinet@y}+\iinet@getblock@{#1}{y}\relax)%
        \stepcounter{iinet@x}% Block!
    }
    \stepcounter{iinet@y}%
  }
}

\def\iinet@single@block@block{
  % block y
  \setcounter{iinet@y}{0}
  \@whilenum\value{iinet@y}<\get{h}\do{%
    \setcounter{iinet@x}{0}%
    \@whilenum\value{iinet@x}<\get{w}\do{%
        \iinet@m@block(%
            \the\numexpr\arabic{iinet@x}+\get{x}\relax,%
            \the\numexpr\arabic{iinet@y}+\get{y}\relax)%
        \stepcounter{iinet@x}% Block!
    }
    \stepcounter{iinet@y}%
  }
  \iinet@update@present@squares
}

% 4)+
\def\iinet@draw@single@block{%
  \@iinet@flag@typeset@block@true
  \stepcounter{iinet@block@count}
  % \set and allocate dimens
  \iinet@loadBlockColor
  \setblock{c}{\iinet@blockcolor}
  \iinet@block@randxy
  \if@iinet@flag@typeset@block@
    \iinet@debug{Block[\get{c}](\get{x},\get{y},\get{w},\get{h})}%
    \iinet@draw@single@@block{\get{x},\get{y}}{\get{c}}{\get{w}}{\get{h}}{}%
    \iinet@single@block@block
  \else
    % free registers
    \addtocounter{iinet@block@count}{-1}
  \fi
}
\endinput