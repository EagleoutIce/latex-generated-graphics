%% block icon network generator package
%% Florian Sihler, 2021-03-14
\ProvidesPackage{blk-ico-net@block}[2021/03/14 v1.0 blk icon network generator package]

%%% How (TODO: rasterize: TODO: maximum number? TODO: padding [save #pt bigger blocks?])
% NOTE: changed usage... not min; inefficient approach at first ^^
% 1) calculate differences between min and max for both dimens: block@dif@{x,y}
% 2) hold a list for all y with [height-block@min@height] elements:
%       list for all x with [width-block@min@width] elements
%    => Listname is 'matrix'
% 3) update present squares:
%   foreach y:
%     max@[y]@x = min(longest consecutive x in cur:y, block@dif@x)
%     if max@[y]@x<block@min@x: [[Throw; y]]
%   max@y = min(longest consecutive y, block@dif@y)
%   if max@y<block@min@y: [[ERROR]]
%
% update present squares()
%
% ------------------------ on block:
% 4) rand@h = rand(block@y@min, max@y)
% 5) pick random y in list.
%   if any in [y..y+rand@h] not in ylist: [[mod-cycle until it fits]] // has to for y
%   (side:) calculate max@x width possible in [y..y+rand@h] // has to for x
% 6) rand@w = rand(block@x@min, max@x)
% pick random x fitting that width
%
% place block (x, y, rand@w, rand@h)
% kill fields1

% location (lower-left) | color | width | height | special name
\def\binet@draw@single@@block#1#2#3#4#5{% TODO: union node with current path
\path[binet@block=#2] (#1)++(\binet@inset@x,\binet@inset@y) rectangle ++(#3-\binet@inset@x,#4-\binet@inset@y) node[%
    midway,outer sep=\z@,inner sep=\z@,
    minimum width=#3-\binet@inset@x pt,
    minimum height=#4-\binet@inset@y pt,% TODO: change shading
    binet@node@block=#2%
] (#5) {}  coordinate[midway,centered] (binet-block-\number\c@binet@block@count);
}

\def\binet@fronte@draw@block{\@ifnextchar[{\binet@@fronte@draw@block}{\binet@loadBlockColor
\binet@@fronte@draw@block[\binet@blockcolor]}}
\def\binet@@fronte@draw@block[#1](#2,#3,#4,#5){\@ifnextchar[{\binet@@@fronte@draw@block[#1](#2,#3,#4,#5)}{\binet@@@fronte@draw@block[#1](#2,#3,#4,#5)[]}}%
\def\binet@@@fronte@draw@block[#1](#2,#3,#4,#5)[#6]{%
    % assure 1 counter
    \advance\c@binet@block@count\@ne
    % compensate inset!
    \binet@draw@single@@block{{#2-\binet@inset@x},{#3-\binet@inset@y}}{#1}{#4+\binet@inset@x}{#5+\binet@inset@y}{#6}%
}

\def\binet@getblock@#1#2{\csname binet@block@#1@#2\endcsname}
\def\binet@getblock#1{\csname binet@block@\number\c@binet@block@count @#1\endcsname}

\def\binet@setblock#1#2{%
\expandafter\edef\csname binet@block@\number\c@binet@block@count @#1\endcsname{#2}%
}

\def\binet@setblockrand#1#2#3{\pgfmathrandominteger{\@binet@tmp}{#2}{#3}\setblock{#1}{\@binet@tmp}}
\def\binet@m@max@of@y#1{\ifcsname binet@max@#1@x\endcsname\@nameuse{binet@max@#1@x}\else-1\fi}
\def\binet@get@consecutive@x@{\ifnum\c@binet@a>\@binet@con@x\relax\edef\@binet@con@x{\number\c@binet@a}\fi\c@binet@a\z@}

\def\binet@get@consecutive@x#1{%
% do not run if already known 0
\ifnum\binet@m@max@of@y{\number\c@binet@y}=\z@\else
\c@binet@a\z@% current
\def\@binet@con@x{0}% maximum
\c@binet@x#1\relax% start x
\binet@m@for@x{%
    \binet@if@m@cfree(binet@x,binet@y)%
        {\advance\c@binet@a\@ne}% free
        {\binet@get@consecutive@x@}%
}\binet@get@consecutive@x@\fi
}

\def\binet@get@consecutive@y@{\ifnum\c@binet@a>\@binet@con@y\relax\edef\@binet@con@y{\number\c@binet@a}\fi\c@binet@a\z@}
\def\binet@get@consecutive@y{%
\c@binet@a\z@% current
\c@binet@b\z@% total added
\def\@binet@con@y{0}% maximum
\def\binet@m@ylist{}%
\binet@m@for@y{%
    \ifnum\binet@m@max@of@y{\number\c@binet@y}=0\relax
        \binet@get@consecutive@y@
    \else
        \advance\c@binet@a\@ne\relax \advance\c@binet@b\@ne
        \listeadd\binet@m@ylist{\number\c@binet@y}%
    \fi
}\binet@get@consecutive@y@
}

\def\binet@update@present@squares{%
    % TODO: set error flag (if?) in case of insufficient dimensions
    \binet@m@for@y{%
        \binet@get@consecutive@x{0}
        \expandafter\edef\csname binet@max@\number\c@binet@y @x\endcsname{\@binet@con@x}%
    }
    \binet@get@consecutive@y
    \expandafter\edef\csname binet@max@y\endcsname{\@binet@con@y}%
    \edef\binet@m@ylist@total{\number\c@binet@b}%
}

\def\binet@block@randxy@picky@first{%
    \pgfmathrandominteger{\binet@rand@y}{0}{\binet@m@ylist@total-\get{h}-1}
    \c@binet@a\z@% current
    \def\binet@selected@y{-1}%
    \def\do##1{%
        \ifnum\c@binet@a=\binet@rand@y\relax
            \edef\binet@selected@y{##1}%
        \fi
        \advance\c@binet@a\@ne
    }
    \dolistloop{\binet@m@ylist}%
}

% start | height
\def\binet@block@randxy@picky@testfit#1#2{%
    % \binet@m@max@of@y
    \c@binet@y#1\relax
    \@binet@flag@a@true
    \edef\@binet@y{\the\numexpr#1+#2+\@ne}% +1 as y not <=
    \@whilenum\c@binet@y<\@binet@y\do{%
        \edef\@binet@tmp{\binet@m@max@of@y{\number\c@binet@y}}%
        \ifnum\@binet@tmp<1 % 0 or invalid
            \@binet@flag@a@false
        \fi
        \advance\c@binet@y\@ne
    }
}

\def\binet@block@randxy@picky{%
% ylist: \binet@m@ylist (\binet@m@ylist@total)
% cycle up to: as the list is sorted ascending,
% there have to be at least 'h' remaining
\binet@block@randxy@picky@first
\c@binet@a\binet@selected@y\relax
\ifnum\binet@selected@y<0
    \PackageWarning{blk-ico-net}{first y pick selected '\binet@selected@y' which is registered as a warning. Block will be omitted}
    \@binet@flag@typeset@block@false
\fi
\binet@block@randxy@picky@testfit{\number\c@binet@a}{\get{h}}
\if@binet@flag@a@\else
    % if this is set binet@a does not suffice
    % so we cycle until it fits or binet@a=\binet@selected@y
    \binet@debug{Original y-selection (\binet@selected@y) failed, reshift}
    \c@binet@b\z@
    \@whilenum\c@binet@b<\binet@m@ylist@total\do{%
        \pgfmathparse{int(mod(\number\c@binet@a+1,\binet@m@ylist@total))}% mod shift 1
        \c@binet@a\pgfmathresult
        \binet@block@randxy@picky@testfit{\number\c@binet@a}{\get{h}}% free
        \if@binet@flag@a@ % can be placed on this height
            \c@binet@b\binet@m@ylist@total\relax% 'break'
        \fi
        \advance\c@binet@b\@ne
    }
\fi
\setblock{y}{\number\c@binet@a}%
}

\def\binet@get@topline@x@{%
    \ifnum\c@binet@a<\c@binet@b\else
        \listeadd\@binet@topline@x{\@binet@curx:\number\c@binet@a}%
        \advance\c@binet@c\@ne
        \edef\@binet@curx{\number\c@binet@x}
    \fi
    \c@binet@a\z@
}

\def\binet@split@listelem#1:#2;{\edef\binet@cur@xidx{#1}\edef\binet@cur@xlen{#2}}

\def\binet@block@randxy@pickxw@topline{%
    \def\@binet@topline@x{}
    \ifnum\binet@m@max@of@y{\number\c@binet@y}=\z@\else
    \c@binet@a\z@% current
    \c@binet@x\z@
    \c@binet@c\z@% total
    \def\@binet@curx{0}
    \binet@m@for@x{%
        \binet@if@m@cfree(binet@x,binet@y)%
            {\advance\c@binet@a\@ne}% free
            {\binet@get@topline@x@}%
    }\binet@get@topline@x@\fi
    % select random element and split '@'
    \c@binet@a\z@% current
    \def\binet@selected@x{}%
    \pgfmathrandominteger{\binet@desired@idx}{0}{\c@binet@c-1}
    \def\do##1{%
        \ifnum\c@binet@a=\binet@desired@idx\relax
            \edef\binet@selected@x{##1}%
        \fi
        \advance\c@binet@a\@ne
    }
    \dolistloop{\@binet@topline@x}%
    \ifx\binet@selected@x\@empty % if does not catch => save
        \@binet@flag@typeset@block@false
    \else
        \expandafter\binet@split@listelem\binet@selected@x;
    \fi
}

\def\binet@get@xrange@x@{%
    \ifnum\c@binet@a>\@binet@sub@xlen\relax
        \edef\@binet@sub@xlen{\number\c@binet@a}%
        \edef\@binet@sub@xidx{\@binet@sub@lastidx}%
    \fi
    \c@binet@a\z@
    \edef\@binet@sub@lastidx{\number\c@binet@x}%
}


\def\binet@block@randxy@pickxw@xrange{%
    \c@binet@x\binet@cur@xidx% current
    \c@binet@a\z@
    \def\@binet@sub@lastidx{0}%
    \def\@binet@sub@xidx{0}%
    \def\@binet@sub@xlen{-1}%
    \@whilenum\c@binet@x<\numexpr\binet@cur@xidx+\binet@cur@xlen+\@ne\relax\do{%
        \binet@if@m@cfree(binet@x,binet@y)%
            {\advance\c@binet@a\@ne}% free
            {\binet@get@xrange@x@}%
        \advance\c@binet@x\@ne
    }\binet@get@xrange@x@
    % intersect [sub:xidx..xidx+xlen] and [cur:xidx..xidx+xlen]
    \edef\binet@cur@xidx@old{\binet@cur@xidx}%
    \ifnum\@binet@sub@xidx>\binet@cur@xidx\relax% low
        \edef\binet@cur@xidx{\@binet@sub@xidx}%
    \fi
    \ifnum\numexpr\@binet@sub@xidx+\@binet@sub@xlen\relax<\numexpr\binet@cur@xidx+\binet@cur@xlen\relax% len
        \edef\binet@cur@xlen{\the\numexpr\@binet@sub@xidx+\@binet@sub@xlen-\binet@cur@xidx}%
    \fi
}


\def\binet@block@randxy@pickxw{%
% find largest rectangle on y
% trying from block@min@width up to max@[y]@x
\setblockrand{w}\binet@block@min@width{min(\binet@block@max@width,\binet@m@max@of@y{\get{y}})}%
\c@binet@b\binet@block@min@width
\def\binet@effective@w{0}%
\def\binet@effective@x{0}%
\@whilenum\c@binet@b<\numexpr\get{w}+\@ne\do{%
    \c@binet@y\get{y}\relax
    % find start in topline => \binet@cur@xidx & \binet@cur@xlen
    \binet@block@randxy@pickxw@topline
    \advance\c@binet@y\@ne
    \if@binet@flag@typeset@block@
    \@whilenum\c@binet@y<\numexpr\get{y}+\get{h}\relax\do{% TODO: maybe +1?
        % search for the largest x-slot in 'xidx..xidx+xlen'
        % if found, it will narrow it down
        \binet@block@randxy@pickxw@xrange
        \advance\c@binet@y\@ne
    }%
    \binet@debug{In run for \number\c@binet@b: [\binet@cur@xidx..+\binet@cur@xlen]}%
    \ifnum\binet@cur@xlen<\binet@effective@w\else
        \ifnum\c@binet@b<\binet@cur@xlen\ifnum\binet@cur@xidx<\z@\else
        \edef\binet@effective@w{\binet@cur@xlen}%
        \edef\binet@effective@x{\binet@cur@xidx}%
        \edef\binet@effective@b{\number\c@binet@b}%
        \binet@debug{  Updated: [\binet@effective@x..+\binet@effective@w]}%
    \fi\fi\fi
    \fi
    \advance\c@binet@b\@ne
}%
\if@binet@flag@typeset@block@
    \ifnum\binet@effective@w<\binet@block@min@width\relax
        \@binet@flag@typeset@block@false
    \else
        \pgfmathparse{int(min(\binet@effective@w,\get{w},\binet@effective@b))}%
        \setblock{w}{\pgfmathresult}%
        \setblockrand{x}{\binet@effective@x}{\binet@effective@x+\binet@effective@w-\get{w}}%
    \fi
\fi
}

% TODO: if fails for current h, try with one h less
\def\binet@block@randxy{
    \setblockrand{h}{\binet@block@min@height}{min(\binet@block@max@height,\binet@max@y)}% 4)
    \binet@block@randxy@picky% 5)
    \binet@block@randxy@pickxw% 6)
}


\def\binet@single@block@specialblock#1#2{
  % block y
  \c@binet@y\z@
  \@whilenum\c@binet@y<\binet@getblock@{#1}{h}\do{%
    \c@binet@x\z@
    \@whilenum\c@binet@x<\binet@getblock@{#1}{w}\do{%
        \csname binet@m@#2\endcsname(%
            \the\numexpr\number\c@binet@x+\binet@getblock@{#1}{x},%
            \the\numexpr\number\c@binet@y+\binet@getblock@{#1}{y})%
        \advance\c@binet@x\@ne% Block!
    }
    \advance\c@binet@y\@ne
  }
}

\def\binet@single@block@block{
  % block y
  \c@binet@y\z@
  \@whilenum\c@binet@y<\get{h}\do{%
    \c@binet@x\z@
    \@whilenum\c@binet@x<\get{w}\do{%
        \binet@m@block(%
            \the\numexpr\number\c@binet@x+\get{x},%
            \the\numexpr\number\c@binet@y+\get{y})
        \advance\c@binet@x\@ne % Block!
    }
    \advance\c@binet@y\@ne
  }
  \binet@update@present@squares
}

% 4)+
\def\binet@draw@single@block{%
  \@binet@flag@typeset@block@true
  \advance\c@binet@block@count\@ne
  % \set and allocate dimens
  \binet@loadBlockColor
  \setblock{c}{\binet@blockcolor}
  \binet@block@randxy
  \if@binet@flag@typeset@block@
    \binet@debug{Block[\get{c}](\get{x},\get{y},\get{w},\get{h})}%
    \binet@draw@single@@block{\get{x},\get{y}}{\get{c}}{\get{w}}{\get{h}}{}%
    \binet@single@block@block
  \else
    % free registers
    \advance\c@binet@block@count-\@ne
  \fi
}
\endinput